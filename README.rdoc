= Jenkins API Client

Client libraries for communicating with a Jenkins CI server and programatically managing jobs.

== OVERVIEW:
This project is a simple API client for interacting with Jenkins Continuous Integration server.
Jenkins provides three kinds of remote access API. 1. XML API, 2. JSON API, and 3. Python API.
This project aims at consuming the JSON API and provides some useful functions for controlling
jobs on the Jenkins programatically. Even though Jenkins provides an awesome UI for controlling
jobs, it would be nice and helpful to have a programmable interface so we can dynamically and
automatically manage jobs and other artifacts.

== DETAILS:
This projects currently only provides functionality for the <tt>jobs</tt> interface. This is
still a work-in-progress project. I mainly use the functionality of this project for my autmation
work and the functionality mainly focussed on my usage and I believe others might find it useful
too. I would love to add more features to it and I will continue working on improving existing
features and add more interfaces such as nodes, views, build queue, etc,.

== USAGE:

=== Installation

Install jenkins_api_client by <tt>sudo gem install jenkins_api_client</tt>
Include this gem in your code as a require statement.

  require 'jenkins_api_client'

=== Using with IRB

If you want to just play with it and not actually want to write a script, you can just use the
irb launcher script which is available in `scripts/login_with_irb.rb`. But make sure that
you have your credentials available in the correct location. By default the script assumes that
you have your credentials file in `~/.jenkins_api_client/login.yml`. If you don't prefer this
location and would like to use a different location, just modify that script to point to the
location where the credentials file exists.

  ruby scripts/login_with_irb.rb

You will see the that it entered IRB session and you can play with the API client with the
`@client` object that it has returned.

=== Authentication

This project supports two types of password-based authentication. You can just you the plain
password by using `password` parameter. If you don't prefer leaving plain passwords in the
credentials file, you can encode your password in base64 format and use `password_base64`
parameter to specify the password either in the arguments or in the credentials file.

=== Basic Usage

As discussed earlier, you can either specify all the credentials and server information as
parameters to the Client or have a credentials file and just parse the yaml file and pass it in.
The following call just passes the information as parameters

  @client = JenkinsApi::Client.new(:server_ip => '0.0.0.0', 
           :username => 'somename', :password => 'secret password')
  # The following call will return all jobs matching 'Testjob'
  puts @client.job.list("^Testjob")

The following example passes the YAML file contents. An example yaml file is located in
`config/login.yml.example`.

  @client = JenkinsApi::Client.new(YAML.Load_file(File.expand_path('~/.jenkins_api_client/login.yml', __FILE__)))
  # The following call lists all jobs
  puts @client.job.list_all

== CONTRIBUTING:

If you would like to contribute to this project, just do the following:

1. Fork the repo on Github.
2. Add your features and make commits to your forked repo.
3. Make a pull request to this repo.
4. Review will be done and changes will be requested.
5. Once changes are done or no changes are required, pull request will be merged.
6. The next release will have your changes in it.

== FEATURE REQUEST:

If you use this gem for your project and you think it would be nice to have a particular feature
that is presently not implemented, I would love to hear that and consider working on it.
Just open an issue in Github as a feature request.
